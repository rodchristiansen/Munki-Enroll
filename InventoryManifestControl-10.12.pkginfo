<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>OnDemand</key>
	<false/>
	<key>autoremove</key>
	<false/>
	<key>catalogs</key>
	<array>
		<string>Testing</string>
	</array>
	<key>category</key>
	<string>Utilities</string>
	<key>description</key>
	<string></string>
	<key>developer</key>
	<string>MacTechs</string>
	<key>display_name</key>
	<string>Inventory Control + Manifest Enrol</string>
	<key>icon_name</key>
	<string>Reporting.png</string>
	<key>installcheck_script</key>
	<string>#!/usr/bin/python

import csv
import subprocess
import plistlib
import sys
import urllib2

CSV_LOCATION = 'http://pluto.edu.ecuad.ca/imaging/reporting/inventory.csv'
CSV = urllib2.urlopen(CSV_LOCATION)

def get_hardware_info():
    '''Uses system profiler to get hardware info for this machine'''
    cmd = ['/usr/sbin/system_profiler', 'SPHardwareDataType', '-xml']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    try:
        plist = plistlib.readPlistFromString(output)
        # system_profiler xml is an array
        sp_dict = plist[0]
        items = sp_dict['_items']
        sp_hardware_dict = items[0]
        return sp_hardware_dict
    except Exception:
        return {}

def check(serial_number, local_computername, local_hostname, local_catalog, local_area, local_room, local_asset):
    csv_data = csv.DictReader(CSV, delimiter=',')
    for row in csv_data:
        serial = row['serial']
        csv_computername = row['name']
        csv_hostname = row['name'].replace(' ','')
        csv_catalog = row['catalog']
        csv_area = row['area']
        csv_room = row['room']
        csv_asset = row['asset']
        if serial == serial_number:
            if csv_computername != local_computername:
                sys.exit(0)                      
            elif csv_hostname != local_hostname:
                sys.exit(0)
            elif csv_catalog != local_catalog:
                sys.exit(0)
            elif csv_area != local_area:
                sys.exit(0)
            elif csv_room != local_room:
                sys.exit(0)
            elif csv_asset != local_asset:
                sys.exit(0)
            else:
                sys.exit(1)

def get_serial_number():
    hardware_info = get_hardware_info()
    return hardware_info.get('serial_number', 'UNKNOWN') 

def get_computername():
    cmd = ['/usr/sbin/scutil', '--get', 'ComputerName']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def get_hostname():
    cmd = ['/usr/sbin/scutil', '--get', 'HostName']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def get_catalog():
    cmd = ['/usr/bin/defaults', 'read', '/Library/Preferences/com.apple.RemoteDesktop', 'Text1']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def get_area():
    cmd = ['/usr/bin/defaults', 'read', '/Library/Preferences/com.apple.RemoteDesktop', 'Text2']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')
    
def get_room():
    cmd = ['/usr/bin/defaults', 'read', '/Library/Preferences/com.apple.RemoteDesktop', 'Text3']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')
    
def get_asset():
    cmd = ['/usr/bin/defaults', 'read', '/Library/Preferences/com.apple.RemoteDesktop', 'Text4']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def main():
    serial_number = get_serial_number()
    local_computername = get_computername()
    local_hostname = get_hostname()
    local_catalog = get_catalog()
    local_area = get_area()
    local_room = get_room()
    local_asset = get_asset()
    check(serial_number, local_computername, local_hostname, local_catalog, local_area, local_room, local_asset)

if __name__ == '__main__':
    main()</string>
	<key>installer_type</key>
	<string>nopkg</string>
	<key>minimum_os_version</key>
	<string>10.7.0</string>
	<key>name</key>
	<string>InventoryManifestEnrol</string>
	<key>postinstall_script</key>
	<string>#!/bin/sh 

# Gather computer information
IDENTIFIER=$( defaults read /Library/Preferences/ManagedInstalls ClientIdentifier );
CATALOG=$( defaults read /Library/Preferences/com.apple.RemoteDesktop.plist Text1 );
AREA=$( defaults read /Library/Preferences/com.apple.RemoteDesktop.plist Text2 );
ROOM=$( defaults read /Library/Preferences/com.apple.RemoteDesktop.plist Text3 );
ASSET=$( defaults read /Library/Preferences/com.apple.RemoteDesktop.plist Text4 );
HOSTNAMETEMP=$( scutil --get ComputerName );

# Removes spaces if exists in hostname
HOSTNAME=${HOSTNAMETEMP// /}

# Change this URL to the location fo your Munki Enroll install
SUBMITURL="http://pluto.edu.ecuad.ca/deployment/enroll/server.php"

# Test the connection to the server
SHORTURL=$(echo "$SUBMITURL" | awk -F/ '{print $3}')
PINGTEST=$(ping -o "$SHORTURL" | grep "64 bytes")

if [ ! -z "$PINGTEST" ]; then

    # Application paths
    CURL="/usr/bin/curl"

    $CURL --max-time 5 --silent --get \
        -d catalog="$CATALOG" \
        -d area="$AREA" \
        -d room="$ROOM" \
        -d asset="$ASSET" \
        -d hostname="$HOSTNAME" \
        "$SUBMITURL"

     sudo defaults write /Library/Preferences/ManagedInstalls ClientIdentifier "$CATALOG/$AREA/$HOSTNAME"
 
    exit 0

else
    # No good connection to the server
    exit 1

fi</string>
	<key>preinstall_script</key>
	<string>#!/usr/bin/python

import csv
import subprocess
import plistlib
import sys
import urllib2

CSV_LOCATION = 'http://pluto.edu.ecuad.ca/imaging/reporting/inventory.csv'
CSV = urllib2.urlopen(CSV_LOCATION)

def get_hardware_info():
    '''Uses system profiler to get hardware info for this machine'''
    cmd = ['/usr/sbin/system_profiler', 'SPHardwareDataType', '-xml']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    try:
        plist = plistlib.readPlistFromString(output)
        # system_profiler xml is an array
        sp_dict = plist[0]
        items = sp_dict['_items']
        sp_hardware_dict = items[0]
        return sp_hardware_dict
    except Exception:
        return {}

def check_compname(serial_number):
    csv_data = csv.DictReader(CSV, delimiter=',')
    for row in csv_data:
        serial = row['serial']
        computername = row['name']
        hostname = row['name'].replace(' ','')
        catalog_tag = row['catalog']
        area_tag = row['area']
        room_tag = row['room']
        asset_tag = row['asset']
        if serial == serial_number:
            set_sharingname(computername)
            set_hostname(hostname)
            set_localhostname(hostname)
            set_catalog_tag(catalog_tag)
            set_area_tag(area_tag)
            set_room_tag(room_tag)
            set_asset_tag(asset_tag)

def get_serial_number():
    hardware_info = get_hardware_info()
    return hardware_info.get('serial_number', 'UNKNOWN') 

def set_sharingname(computername):
    cmd = ['sudo', '/usr/sbin/scutil', '--set', 'ComputerName', computername]
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def set_hostname(hostname):
    cmd = ['sudo', '/usr/sbin/scutil', '--set', 'HostName', hostname]
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def set_localhostname(hostname):
    cmd = ['sudo', '/usr/sbin/scutil', '--set', 'LocalHostName', hostname]
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def set_catalog_tag(catalog_tag):
    cmd = ['sudo', '/usr/bin/defaults', 'write', '/Library/Preferences/com.apple.RemoteDesktop.plist', 'Text1', '-string', catalog_tag]
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def set_area_tag(area_tag):
    cmd = ['sudo', '/usr/bin/defaults', 'write', '/Library/Preferences/com.apple.RemoteDesktop.plist', 'Text2', '-string', area_tag]
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def set_room_tag(room_tag):
    cmd = ['sudo', '/usr/bin/defaults', 'write', '/Library/Preferences/com.apple.RemoteDesktop.plist', 'Text3', '-string', room_tag]
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def set_asset_tag(asset_tag):
    cmd = ['sudo', '/usr/bin/defaults', 'write', '/Library/Preferences/com.apple.RemoteDesktop.plist', 'Text4', '-string', asset_tag]
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    return output.rstrip('\n')

def main():
    serial_number = get_serial_number()
    check_compname(serial_number)

if __name__ == '__main__':
    main()
    
sys.exit(0)</string>
	<key>requires</key>
	<array/>
	<key>unattended_install</key>
	<true/>
	<key>version</key>
	<string>10.12</string>
</dict>
</plist>
